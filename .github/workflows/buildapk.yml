name: Build and Release APK

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout CasioEmuAndroid repository
      uses: actions/checkout@v3
      with:
        repository: telecomadm1145/CasioEmuAndroid

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Set up Android SDK
      uses: android-actions/setup-android@v2

    - name: Accept Android SDK licenses
      run: yes | sdkmanager --licenses

    - name: Encode and split verification message
      run: |
        # Mã hóa thông điệp nhiều lần
        MESSAGE="Build by hieuxyz"
        ENCODED=$(echo -n "$MESSAGE" | base64)
        ENCODED=$(echo -n "$ENCODED" | base64)
        ENCODED=$(echo -n "$ENCODED" | base64)
        
        # Chia thông điệp thành nhiều phần
        PART1="${ENCODED:0:10}"
        PART2="${ENCODED:10:10}"
        PART3="${ENCODED:20}"
        
        echo "PART1=$PART1" >> $GITHUB_ENV
        echo "PART2=$PART2" >> $GITHUB_ENV
        echo "PART3=$PART3" >> $GITHUB_ENV

    - name: Find and Modify Files
      run: |
        # Tìm tất cả các file Java và Kotlin
        FILES=$(find . -type f \( -name "*.java" -o -name "*.kt" \))
        
        # Đếm số file
        FILE_COUNT=$(echo "$FILES" | wc -l)
        
        # Chọn 3 file ngẫu nhiên
        FILE1=$(echo "$FILES" | sed -n "$(( RANDOM % FILE_COUNT + 1 ))p")
        FILE2=$(echo "$FILES" | sed -n "$(( RANDOM % FILE_COUNT + 1 ))p")
        FILE3=$(echo "$FILES" | sed -n "$(( RANDOM % FILE_COUNT + 1 ))p")
        
        # Thêm code vào các file
        echo "Modifying $FILE1"
        if [[ $FILE1 == *.java ]]; then
          sed -i '1i private static final String VERIFY_PART1 = "${{ env.PART1 }}";' "$FILE1"
        else
          sed -i '1i val VERIFY_PART1 = "${{ env.PART1 }}"' "$FILE1"
        fi
        
        echo "Modifying $FILE2"
        if [[ $FILE2 == *.java ]]; then
          sed -i '1i private static final String VERIFY_PART2 = "${{ env.PART2 }}";' "$FILE2"
        else
          sed -i '1i val VERIFY_PART2 = "${{ env.PART2 }}"' "$FILE2"
        fi
        
        echo "Modifying $FILE3"
        if [[ $FILE3 == *.java ]]; then
          sed -i '1i private static final String VERIFY_PART3 = "${{ env.PART3 }}";' "$FILE3"
        else
          sed -i '1i val VERIFY_PART3 = "${{ env.PART3 }}"' "$FILE3"
        fi
        
        # Tìm MainActivity hoặc file chính
        MAIN_FILE=$(grep -R -l "class.*extends.*Activity" . | head -n 1)
        
        if [ -z "$MAIN_FILE" ]; then
          echo "Warning: Could not find MainActivity or main Activity file"
        else
          echo "Modifying main file: $MAIN_FILE"
          
          # Thêm code kiểm tra
          if [[ $MAIN_FILE == *.java ]]; then
            sed -i '/super.onCreate/a\
            String fullEncoded = VERIFY_PART1 + VERIFY_PART2 + VERIFY_PART3;\
            String decoded = new String(android.util.Base64.decode(new String(android.util.Base64.decode(new String(android.util.Base64.decode(fullEncoded, android.util.Base64.DEFAULT)), android.util.Base64.DEFAULT)), android.util.Base64.DEFAULT));\
            if (!decoded.equals("Build by hieuxyz")) {\
                throw new RuntimeException("Invalid build signature");\
            }\
            android.widget.Toast.makeText(this, decoded, android.widget.Toast.LENGTH_LONG).show();' "$MAIN_FILE"
          else
            sed -i '/super.onCreate/a\
            val fullEncoded = VERIFY_PART1 + VERIFY_PART2 + VERIFY_PART3\
            val decoded = String(android.util.Base64.decode(String(android.util.Base64.decode(String(android.util.Base64.decode(fullEncoded, android.util.Base64.DEFAULT)), android.util.Base64.DEFAULT)), android.util.Base64.DEFAULT))\
            if (decoded != "Build by hieuxyz") {\
                throw RuntimeException("Invalid build signature")\
            }\
            android.widget.Toast.makeText(this, decoded, android.widget.Toast.LENGTH_LONG).show()' "$MAIN_FILE"
          fi
        fi

    - name: Modify build.gradle files
      run: |
        # Tìm tất cả các file build.gradle
        GRADLE_FILES=$(find . -name "build.gradle")
        
        for FILE in $GRADLE_FILES; do
          echo "Modifying file: $FILE"
          
          # Thêm cấu hình để build nhiều kiến trúc
          sed -i '/android {/a\
            defaultConfig {\
                ndk {\
                    abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"\
                }\
            }\
            splits {\
                abi {\
                    enable true\
                    reset()\
                    include "armeabi-v7a", "arm64-v8a", "x86", "x86_64"\
                    universalApk true\
                }\
            }' "$FILE"
          
          echo "Modified $FILE"
        done

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    - name: Build APKs
      run: |
        export ANDROID_SDK_ROOT=$ANDROID_HOME
        ./gradlew assembleRelease --warning-mode all
        
        mkdir -p apks
        
        process_apk() {
          local INPUT=$1
          local OUTPUT=$2
          ${ANDROID_HOME}/build-tools/*/zipalign -v 4 $INPUT $OUTPUT
          
          if [ ! -f ~/.android/debug.keystore ]; then
            mkdir -p ~/.android
            keytool -genkey -v -keystore ~/.android/debug.keystore -storepass android -alias androiddebugkey -keypass android -keyalg RSA -keysize 2048 -validity 10000 -dname "CN=Android Debug,O=Android,C=US"
          fi
          
          ${ANDROID_HOME}/build-tools/*/apksigner sign --ks ~/.android/debug.keystore --ks-key-alias androiddebugkey --ks-pass pass:android --key-pass pass:android $OUTPUT
        }
        
        APK_FILES=$(find . -name "*-release-unsigned.apk")
        if [ -z "$APK_FILES" ]; then
          echo "Warning: No APK files found"
        else
          for APK in $APK_FILES; do
            BASENAME=$(basename $APK)
            if [[ $BASENAME == *"x86"* ]]; then
              process_apk $APK apks/CasioEmuAndroid-x86.apk
            elif [[ $BASENAME == *"armeabi-v7a"* ]]; then
              process_apk $APK apks/CasioEmuAndroid-arm32.apk
            elif [[ $BASENAME == *"arm64-v8a"* ]]; then
              process_apk $APK apks/CasioEmuAndroid-arm64.apk
            elif [[ $BASENAME == *"x86_64"* ]]; then
              process_apk $APK apks/CasioEmuAndroid-x64.apk
            elif [[ $BASENAME == *"universal"* ]] || [[ $BASENAME == *"release"* ]]; then
              process_apk $APK apks/CasioEmuAndroid-universal.apk
            fi
          done
        fi

    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION=${{ github.run_number }}
        RELEASE_FILES=$(find apks -name "*.apk")
        if [ -z "$RELEASE_FILES" ]; then
          echo "Error: No APK files found to release"
          exit 1
        fi
        gh release create v$VERSION \
          --title "Release $VERSION" \
          --notes "Release notes for version $VERSION" \
          $RELEASE_FILES
