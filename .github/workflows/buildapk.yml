name: Build, Translate, and Release APK

on:
  workflow_dispatch:
    inputs:
      target_language:
        description: 'Target language for translation (e.g., vi for Vietnamese)'
        required: true
        default: 'vi'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout CasioEmuAndroid repository
      uses: actions/checkout@v3
      with:
        repository: telecomadm1145/CasioEmuAndroid

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Set up Android SDK
      uses: android-actions/setup-android@v2

    - name: Accept Android SDK licenses
      run: yes | sdkmanager --licenses

    - name: Install necessary tools
      run: |
        sudo apt-get update
        sudo apt-get install -y gettext python3-pip
        pip3 install googletrans==3.1.0a0

    - name: Encode and split verification message
      run: |
        MESSAGE="Build by hieuxyz"
        ENCODED=$(echo -n "$MESSAGE" | base64 | base64 | base64)
        PART1="${ENCODED:0:10}"
        PART2="${ENCODED:10:10}"
        PART3="${ENCODED:20}"
        echo "PART1=$PART1" >> $GITHUB_ENV
        echo "PART2=$PART2" >> $GITHUB_ENV
        echo "PART3=$PART3" >> $GITHUB_ENV

    - name: Find and Modify Files
      run: |
        FILES=$(find . -type f \( -name "*.java" -o -name "*.kt" \))
        FILE_COUNT=$(echo "$FILES" | wc -l)
        FILE1=$(echo "$FILES" | sed -n "$(( RANDOM % FILE_COUNT + 1 ))p")
        FILE2=$(echo "$FILES" | sed -n "$(( RANDOM % FILE_COUNT + 1 ))p")
        FILE3=$(echo "$FILES" | sed -n "$(( RANDOM % FILE_COUNT + 1 ))p")
        
        modify_file() {
          local FILE=$1
          local PART=$2
          local CONTENT
          if [[ $FILE == *.java ]]; then
            CONTENT="private static final String VERIFY_PART$PART = \"${!PART}\";"
            sed -i "/package/a $CONTENT" "$FILE"
          else
            CONTENT="val VERIFY_PART$PART = \"${!PART}\""
            sed -i "/package/a $CONTENT" "$FILE"
          fi
          echo "Modified $FILE"
        }
        
        modify_file "$FILE1" "PART1"
        modify_file "$FILE2" "PART2"
        modify_file "$FILE3" "PART3"
        
        MAIN_FILE=$(grep -R -l "class.*extends.*Activity" . | head -n 1)
        if [ -z "$MAIN_FILE" ]; then
          echo "Warning: Could not find MainActivity or main Activity file"
        else
          echo "Modifying main file: $MAIN_FILE"
          VERIFICATION_CODE='
        val fullEncoded = VERIFY_PART1 + VERIFY_PART2 + VERIFY_PART3
        val decoded = String(
          android.util.Base64.decode(
            String(
              android.util.Base64.decode(
                String(
                  android.util.Base64.decode(fullEncoded, android.util.Base64.DEFAULT)
                ),
                android.util.Base64.DEFAULT
              )
            ),
            android.util.Base64.DEFAULT
          )
        )
        if (decoded != "Build by hieuxyz") {
            throw RuntimeException("Invalid build signature")
        }
        android.widget.Toast.makeText(this, decoded, android.widget.Toast.LENGTH_LONG).show()
          '
          sed -i "/super.onCreate/a $VERIFICATION_CODE" "$MAIN_FILE"
        fi

    - name: Fix import statements and update specific files
      run: |
        fix_imports() {
          local file=$1
          # Move package statement to top if it exists
          sed -i '1h;1d;$G' "$file"
          
          # Collect all import statements
          imports=$(grep -E '^import' "$file" | sort -u)
          
          # Remove all existing import statements
          sed -i '/^import/d' "$file"
          
          # Add collected import statements after package
          if [ -n "$imports" ]; then
            sed -i "/^package/a $imports\n" "$file"
          fi
        }

        find . -name "*.kt" -type f | while read -r file; do
          fix_imports "$file"
        done

        # Update FirstFragment.kt
        FIRST_FRAGMENT=$(find . -name "FirstFragment.kt")
        if [ -n "$FIRST_FRAGMENT" ]; then
          cat > "$FIRST_FRAGMENT" <<EOL
package casiocalchacking.casioemu

import android.os.Bundle
import androidx.fragment.app.Fragment
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.navigation.fragment.findNavController
import casiocalchacking.casioemu.databinding.FragmentFirstBinding

class FirstFragment : Fragment() {

    private var _binding: FragmentFirstBinding? = null
    private val binding get() = _binding!!

    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        _binding = FragmentFirstBinding.inflate(inflater, container, false)
        return binding.root
    }

    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        binding.buttonFirst.setOnClickListener {
            findNavController().navigate(R.id.action_FirstFragment_to_SecondFragment)
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        _binding = null
    }
}
EOL
          echo "Updated FirstFragment.kt"
        else
          echo "Warning: FirstFragment.kt not found"
        fi

        # Update MainActivity.kt
        MAIN_ACTIVITY=$(find . -name "MainActivity.kt")
        if [ -n "$MAIN_ACTIVITY" ]; then
          cat > "$MAIN_ACTIVITY" <<EOL
package casiocalchacking.casioemu

import android.os.Bundle
import com.google.android.material.snackbar.Snackbar
import androidx.appcompat.app.AppCompatActivity
import androidx.navigation.findNavController
import androidx.navigation.ui.AppBarConfiguration
import androidx.navigation.ui.navigateUp
import androidx.navigation.ui.setupActionBarWithNavController
import android.view.Menu
import android.view.MenuItem
import casiocalchacking.casioemu.databinding.ActivityMainBinding

class MainActivity : AppCompatActivity() {

    private lateinit var appBarConfiguration: AppBarConfiguration
    private lateinit var binding: ActivityMainBinding

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        setSupportActionBar(binding.toolbar)

        val navController = findNavController(R.id.nav_host_fragment_content_main)
        appBarConfiguration = AppBarConfiguration(navController.graph)
        setupActionBarWithNavController(navController, appBarConfiguration)

        binding.fab.setOnClickListener { view ->
            Snackbar.make(view, "Replace with your own action", Snackbar.LENGTH_LONG)
                    .setAction("Action", null).show()
        }
    }

    override fun onCreateOptionsMenu(menu: Menu): Boolean {
        menuInflater.inflate(R.menu.menu_main, menu)
        return true
    }

    override fun onOptionsItemSelected(item: MenuItem): Boolean {
        return when (item.itemId) {
            R.id.action_settings -> true
            else -> super.onOptionsItemSelected(item)
        }
    }

    override fun onSupportNavigateUp(): Boolean {
        val navController = findNavController(R.id.nav_host_fragment_content_main)
        return navController.navigateUp(appBarConfiguration)
                || super.onSupportNavigateUp()
    }
}
EOL
          echo "Updated MainActivity.kt"
        else
          echo "Warning: MainActivity.kt not found"
        fi

        # Update build.gradle (app)
        APP_GRADLE=$(find . -name "build.gradle" | grep "/app/")
        if [ -n "$APP_GRADLE" ]; then
          cat > "$APP_GRADLE" <<EOL
plugins {
    id 'com.android.application'
    id 'kotlin-android'
}

android {
    compileSdkVersion 31
    defaultConfig {
        applicationId "casiocalchacking.casioemu"
        minSdkVersion 21
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.4.1'
    implementation 'androidx.navigation:navigation-ui-ktx:2.4.1'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
}
EOL
          echo "Updated app/build.gradle"
        else
          echo "Warning: app/build.gradle not found"
        fi

        # Update gradle.properties
        GRADLE_PROPERTIES="gradle.properties"
        if [ -f "$GRADLE_PROPERTIES" ]; then
          echo "android.useAndroidX=true" >> "$GRADLE_PROPERTIES"
          echo "android.enableJetifier=true" >> "$GRADLE_PROPERTIES"
          echo "Updated gradle.properties"
        else
          echo "Warning: gradle.properties not found"
        fi

    - name: Translate strings
      run: |
        TARGET_LANG="${{ github.event.inputs.target_language }}"
        
        translate_file() {
          local FILE=$1
          local BASENAME=$(basename "$FILE")
          local DIR=$(dirname "$FILE")
          local NEW_DIR="${DIR}-${TARGET_LANG}"
          mkdir -p "$NEW_DIR"
          local NEW_FILE="${NEW_DIR}/${BASENAME}"
          
          echo "Translating $FILE to $NEW_FILE"
          
          python3 - <<EOF
        from googletrans import Translator
        import xml.etree.ElementTree as ET
        
        translator = Translator()
        tree = ET.parse('$FILE')
        root = tree.getroot()
        
        for elem in root.iter():
          if elem.text and not elem.text.strip().startswith('@'):
            elem.text = translator.translate(elem.text, dest='$TARGET_LANG').text
        
        tree.write('$NEW_FILE', encoding='utf-8', xml_declaration=True)
        EOF
          
          echo "Translated $FILE to $NEW_FILE"
        }
        
        STRING_FILES=$(find . -name "strings.xml")
        
        for FILE in $STRING_FILES; do
          translate_file "$FILE"
        done

    - name: Modify build.gradle files
      run: |
        GRADLE_FILES=$(find . -name "build.gradle")
        for FILE in $GRADLE_FILES; do
          echo "Modifying file: $FILE"
          sed -i '/android {/a\
            defaultConfig {\
                ndk {\
                    abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"\
                }\
            }\
            splits {\
                abi {\
                    enable true\
                    reset()\
                    include "armeabi-v7a", "arm64-v8a", "x86", "x86_64"\
                    universalApk true\
                }\
            }' "$FILE"
          echo "Modified $FILE"
        done

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    - name: Build APKs
      run: |
        export ANDROID_SDK_ROOT=$ANDROID_HOME
        ./gradlew clean
        ./gradlew assembleRelease --warning-mode all
        
        mkdir -p apks
        
        process_apk() {
          local INPUT=$1
          local OUTPUT=$2
          echo "Processing APK: $INPUT -> $OUTPUT"
          
          if [ ! -f "$INPUT" ]; then
            echo "Error: Input file $INPUT does not exist"
            return 1
          fi
          
          mkdir -p "$(dirname "$OUTPUT")"
          
          ZIPALIGN="$(find $ANDROID_HOME/build-tools -name zipalign | sort -r | head -n 1)"
          
          if ! "$ZIPALIGN" -v 4 "$INPUT" "$OUTPUT"; then
            echo "Error: zipalign failed for $INPUT"
            return 1
          fi
          
          if [ ! -f ~/.android/debug.keystore ]; then
            mkdir -p ~/.android
            keytool -genkey -v -keystore ~/.android/debug.keystore -storepass android -alias androiddebugkey -keypass android -keyalg RSA -keysize 2048 -validity 10000 -dname "CN=Android Debug,O=Android,C=US"
          fi
          
          APKSIGNER="$(find $ANDROID_HOME/build-tools -name apksigner | sort -r | head -n 1)"
          
          if ! "$APKSIGNER" sign --ks ~/.android/debug.keystore --ks-key-alias androiddebugkey --ks-pass pass:android --key-pass pass:android "$OUTPUT"; then
            echo "Error: apksigner failed for $OUTPUT"
            return 1
          fi
          
          echo "Successfully processed $OUTPUT"
        }
        
        APK_FILES=$(find . -name "*-release-unsigned.apk")
        if [ -z "$APK_FILES" ]; then
          echo "Warning: No unsigned release APK files found"
          APK_FILES=$(find . -name "*.apk")
          if [ -z "$APK_FILES" ]; then
            echo "Error: No APK files found at all"
            exit 1
          fi
        fi
        for APK in $APK_FILES; do
          BASENAME=$(basename "$APK")
          OUTPUT_APK="apks/${BASENAME%.apk}-signed.apk"
          process_apk "$APK" "$OUTPUT_APK"
        done

    - name: Upload APKs
      uses: actions/upload-artifact@v3
      with:
        name: apks
        path: apks/*.apk

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release ${{ github.run_number }}
        draft: false
        prerelease: false

    - name: Upload Release Assets
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: ./apks/*.apk
        tag_name: v${{ github.run_number }}

    - name: Cleanup Gradle Cache
      run: |
        rm -f ~/.gradle/caches/modules-2/modules-2.lock
        rm -f ~/.gradle/caches/modules-2/gc.properties