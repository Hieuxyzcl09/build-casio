name: Build, Translate, and Release APK

on:
  workflow_dispatch:
    inputs:
      target_language:
        description: 'Target language for translation (e.g., vi for Vietnamese)'
        required: true
        default: 'vi'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout CasioEmuAndroid repository
      uses: actions/checkout@v3
      with:
        repository: telecomadm1145/CasioEmuAndroid

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'adopt'

    - name: Set up Android SDK
      uses: android-actions/setup-android@v2

    - name: Accept Android SDK licenses
      run: yes | sdkmanager --licenses

    - name: Install necessary tools
      run: |
        sudo apt-get update
        sudo apt-get install -y gettext python3-pip
        pip3 install googletrans==3.1.0a0

    - name: Encode and split verification message
      run: |
        MESSAGE="Build by hieuxyz"
        ENCODED=$(echo -n "$MESSAGE" | base64 | base64 | base64)
        PART1="${ENCODED:0:10}"
        PART2="${ENCODED:10:10}"
        PART3="${ENCODED:20}"
        echo "PART1=$PART1" >> $GITHUB_ENV
        echo "PART2=$PART2" >> $GITHUB_ENV
        echo "PART3=$PART3" >> $GITHUB_ENV

    - name: Find and Modify Files
      run: |
        FILES=$(find . -type f \( -name "*.java" -o -name "*.kt" \))
        FILE_COUNT=$(echo "$FILES" | wc -l)
        FILE1=$(echo "$FILES" | sed -n "$(( RANDOM % FILE_COUNT + 1 ))p")
        FILE2=$(echo "$FILES" | sed -n "$(( RANDOM % FILE_COUNT + 1 ))p")
        FILE3=$(echo "$FILES" | sed -n "$(( RANDOM % FILE_COUNT + 1 ))p")
        
        modify_file() {
          local FILE=$1
          local PART=$2
          local CONTENT
          if [[ $FILE == *.java ]]; then
            CONTENT="private static final String VERIFY_PART$PART = \"${!PART}\";"
          else
            CONTENT="val VERIFY_PART$PART = \"${!PART}\""
          fi
          sed -i "1i $CONTENT" "$FILE"
          echo "Modified $FILE"
        }
        
        modify_file "$FILE1" "PART1"
        modify_file "$FILE2" "PART2"
        modify_file "$FILE3" "PART3"
        
        MAIN_FILE=$(grep -R -l "class.*extends.*Activity" . | head -n 1)
        if [ -z "$MAIN_FILE" ]; then
          echo "Warning: Could not find MainActivity or main Activity file"
        else
          echo "Modifying main file: $MAIN_FILE"
          VERIFICATION_CODE='
            val fullEncoded = VERIFY_PART1 + VERIFY_PART2 + VERIFY_PART3
            val decoded = String(
              android.util.Base64.decode(
                String(
                  android.util.Base64.decode(
                    String(
                      android.util.Base64.decode(fullEncoded, android.util.Base64.DEFAULT)
                    ),
                    android.util.Base64.DEFAULT
                  )
                ),
                android.util.Base64.DEFAULT
              )
            )
            if (decoded != "Build by hieuxyz") {
                throw RuntimeException("Invalid build signature")
            }
            android.widget.Toast.makeText(this, decoded, android.widget.Toast.LENGTH_LONG).show()
          '
          sed -i "/super.onCreate/a $VERIFICATION_CODE" "$MAIN_FILE"
        fi

    - name: Translate strings
      run: |
        TARGET_LANG="${{ github.event.inputs.target_language }}"
        
        translate_file() {
          local FILE=$1
          local BASENAME=$(basename "$FILE")
          local DIR=$(dirname "$FILE")
          local NEW_DIR="${DIR}-${TARGET_LANG}"
          mkdir -p "$NEW_DIR"
          local NEW_FILE="${NEW_DIR}/${BASENAME}"
          
          echo "Translating $FILE to $NEW_FILE"
          
          python3 - <<EOF
        from googletrans import Translator
        import xml.etree.ElementTree as ET
        
        translator = Translator()
        tree = ET.parse('$FILE')
        root = tree.getroot()
        
        for elem in root.iter():
          if elem.text and not elem.text.strip().startswith('@'):
            elem.text = translator.translate(elem.text, dest='$TARGET_LANG').text
        
        tree.write('$NEW_FILE', encoding='utf-8', xml_declaration=True)
        EOF
          
          echo "Translated $FILE to $NEW_FILE"
        }
        
        STRING_FILES=$(find . -name "strings.xml")
        
        for FILE in $STRING_FILES; do
          translate_file "$FILE"
        done

    - name: Modify build.gradle files
      run: |
        GRADLE_FILES=$(find . -name "build.gradle")
        for FILE in $GRADLE_FILES; do
          echo "Modifying file: $FILE"
          sed -i '/android {/a\
            defaultConfig {\
                ndk {\
                    abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"\
                }\
            }\
            splits {\
                abi {\
                    enable true\
                    reset()\
                    include "armeabi-v7a", "arm64-v8a", "x86", "x86_64"\
                    universalApk true\
                }\
            }' "$FILE"
          echo "Modified $FILE"
        done

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x ./gradlew

    - name: Build APKs
      run: |
        export ANDROID_SDK_ROOT=$ANDROID_HOME
        ./gradlew assembleRelease --warning-mode all
        
        mkdir -p apks
        
        process_apk() {
          local INPUT=$1
          local OUTPUT=$2
          echo "Processing APK: $INPUT -> $OUTPUT"
          
          # Kiểm tra xem tệp đầu vào có tồn tại không
          if [ ! -f "$INPUT" ]; then
            echo "Error: Input file $INPUT does not exist"
            return 1
          fi
          
          # Đảm bảo thư mục đầu ra tồn tại
          mkdir -p "$(dirname "$OUTPUT")"
          
          # Sử dụng đường dẫn đầy đủ cho zipalign
          ZIPALIGN="${ANDROID_HOME}/build-tools/*/zipalign"
          
          # Chạy zipalign với xử lý lỗi
          if ! $ZIPALIGN -v 4 "$INPUT" "$OUTPUT"; then
            echo "Error: zipalign failed for $INPUT"
            return 1
          fi
          
          if [ ! -f ~/.android/debug.keystore ]; then
            mkdir -p ~/.android
            keytool -genkey -v -keystore ~/.android/debug.keystore -storepass android -alias androiddebugkey -keypass android -keyalg RSA -keysize 2048 -validity 10000 -dname "CN=Android Debug,O=Android,C=US"
          fi
          
          # Sử dụng đường dẫn đầy đủ cho apksigner
          APKSIGNER="${ANDROID_HOME}/build-tools/*/apksigner"
          
          # Chạy apksigner với xử lý lỗi
          if ! $APKSIGNER sign --ks ~/.android/debug.keystore --ks-key-alias androiddebugkey --ks-pass pass:android --key-pass pass:android "$OUTPUT"; then
            echo "Error: apksigner failed for $OUTPUT"
            return 1
          fi
          
          echo "Successfully processed $OUTPUT"
        }
        
        APK_FILES=$(find . -name "*-release-unsigned.apk")
        if [ -z "$APK_FILES" ]; then
          echo "Warning: No unsigned release APK files found"
          APK_FILES=$(find . -name "*.apk")
          if [ -z "$APK_FILES" ]; then
            echo "Error: No APK files found at all"
            exit 1
          fi
        fi
        for APK in $APK_FILES; do
          BASENAME=$(basename "$APK")
          if [[ $BASENAME == *"x86"* ]]; then
            process_apk "$APK" "apks/CasioEmuAndroid-x86-${{ github.event.inputs.target_language }}.apk"
          elif [[ $BASENAME == *"armeabi-v7a"* ]]; then
            process_apk "$APK" "apks/CasioEmuAndroid-arm32-${{ github.event.inputs.target_language }}.apk"
          elif [[ $BASENAME == *"arm64-v8a"* ]]; then
            process_apk "$APK" "apks/CasioEmuAndroid-arm64-${{ github.event.inputs.target_language }}.apk"
          elif [[ $BASENAME == *"x86_64"* ]]; then
            process_apk "$APK" "apks/CasioEmuAndroid-x64-${{ github.event.inputs.target_language }}.apk"
          elif [[ $BASENAME == *"universal"* ]] || [[ $BASENAME == *"release"* ]]; then
            process_apk "$APK" "apks/CasioEmuAndroid-universal-${{ github.event.inputs.target_language }}.apk"
          else
            process_apk "$APK" "apks/CasioEmuAndroid-unknown-${{ github.event.inputs.target_language }}.apk"
          fi
          
          # Kiểm tra xem process_apk có thành công không
          if [ $? -ne 0 ]; then
            echo "Error occurred while processing $APK"
            exit 1
          fi
        done

    - name: Create Release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION=${{ github.run_number }}
        RELEASE_FILES=$(find apks -name "*.apk")
        if [ -z "$RELEASE_FILES" ]; then
          echo "Error: No APK files found to release"
          exit 1
        fi
        gh release create "v$VERSION-${{ github.event.inputs.target_language }}" \
          --title "Release $VERSION (${{ github.event.inputs.target_language }})" \
          --notes "Release notes for version $VERSION (Translated to ${{ github.event.inputs.target_language }})" \
          $RELEASE_FILES