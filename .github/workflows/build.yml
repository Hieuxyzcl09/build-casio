name: Build CasioEmuMsvc

on:
  workflow_dispatch:

permissions:
  contents: write

env:
  DOTNET_CLI_TELEMETRY_OPTOUT: 1
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true

jobs:
  setup:
    runs-on: windows-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        repository: telecomadm1145/CasioEmuMsvc
        path: CasioEmuMsvc
        fetch-depth: 0

    - name: Setup Visual Studio
      uses: microsoft/setup-msbuild@v1.3.2

    - name: Install Visual Studio components and SDK
      run: |
        Invoke-WebRequest -Uri "https://aka.ms/vs/17/release/vs_enterprise.exe" -OutFile "$env:TEMP\vs_enterprise.exe"
        Start-Process -FilePath "$env:TEMP\vs_enterprise.exe" -ArgumentList `
          "--installPath", "C:\VS2022", `
          "--add", "Microsoft.VisualStudio.Workload.NativeDesktop", `
          "--add", "Microsoft.VisualStudio.Workload.ManagedDesktop", `
          "--add", "Microsoft.VisualStudio.Workload.Universal", `
          "--add", "Microsoft.Net.Component.4.8.SDK", `
          "--add", "Microsoft.Net.Component.4.7.2.TargetingPack", `
          "--add", "Microsoft.VisualStudio.Component.Windows10SDK.19041", `
          "--add", "Microsoft.VisualStudio.Component.VC.Tools.x86.x64", `
          "--add", "Microsoft.VisualStudio.Component.VC.ATL", `
          "--add", "Microsoft.VisualStudio.Component.VC.ATLMFC", `
          "--add", "Microsoft.VisualStudio.Component.Windows11SDK.22000", `
          "--add", "Microsoft.VisualStudio.Component.VC.Redist.14.Latest", `
          "--add", "Microsoft.VisualStudio.ComponentGroup.NativeDesktop.Core", `
          "--add", "Microsoft.VisualStudio.Component.Windows10SDK.20348", `
          "--includeRecommended", `
          "--quiet", "--norestart", "--wait" `
          -NoNewWindow -Wait
      shell: pwsh

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: |
          5.0.x
          6.0.x
          7.0.x

    - name: Cache Visual Studio installation
      uses: actions/cache@v4
      with:
        path: C:\VS2022
        key: vs2022-cache-${{ runner.os }}-${{ hashFiles('**/vs_enterprise.exe') }}

    - name: Install additional dependencies
      run: |
        choco install windbg -y
        choco install windows-sdk-10-version-2004-all -y
      shell: pwsh

  restore_packages:
    needs: setup
    runs-on: windows-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        repository: telecomadm1145/CasioEmuMsvc
        path: CasioEmuMsvc
        fetch-depth: 0

    - name: Setup NuGet
      uses: NuGet/setup-nuget@v2.0.0

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: nuget-${{ runner.os }}-${{ hashFiles('**/packages.config', '**/*.csproj', '**/*.props', '**/*.targets') }}
        restore-keys: |
          nuget-${{ runner.os }}-

    - name: Clear NuGet cache and restore packages
      run: |
        nuget locals all -clear
        Get-ChildItem -Path $env:GITHUB_WORKSPACE\CasioEmuMsvc -Filter *.sln -Recurse | ForEach-Object {
          Write-Host "Restoring NuGet packages for $_"
          nuget restore $_.FullName -Verbosity detailed
        }
        Get-ChildItem -Path $env:GITHUB_WORKSPACE\CasioEmuMsvc -Filter *.csproj -Recurse | ForEach-Object {
          Write-Host "Restoring .NET packages for $_"
          dotnet restore $_.FullName --verbosity detailed
        }
      shell: pwsh

  code_analysis:
    needs: restore_packages
    runs-on: windows-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        repository: telecomadm1145/CasioEmuMsvc
        path: CasioEmuMsvc
        fetch-depth: 0

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.3.2

    - name: Setup Visual Studio Developer Command Prompt
      uses: ilammy/msvc-dev-cmd@v1

    - name: Run Code Analysis
      run: |
        msbuild $env:GITHUB_WORKSPACE\CasioEmuMsvc\CasioEmuMsvc.sln /t:Rebuild /p:RunCodeAnalysis=true /p:Configuration=Release /p:Platform=x64
      continue-on-error: true
      shell: pwsh

  build:
    needs: [restore_packages, code_analysis]
    runs-on: windows-latest
    strategy:
      matrix:
        configuration: [Debug, Release]
        platform: [x86, x64]
      fail-fast: false
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        repository: telecomadm1145/CasioEmuMsvc
        path: CasioEmuMsvc
        fetch-depth: 0

    - name: Setup MSBuild
      uses: microsoft/setup-msbuild@v1.3.2

    - name: Setup Visual Studio Developer Command Prompt
      uses: ilammy/msvc-dev-cmd@v1

    - name: Restore cached Visual Studio installation
      uses: actions/cache@v4
      with:
        path: C:\VS2022
        key: vs2022-cache-${{ runner.os }}-${{ hashFiles('**/vs_enterprise.exe') }}

    - name: Restore cached NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: nuget-${{ runner.os }}-${{ hashFiles('**/packages.config', '**/*.csproj', '**/*.props', '**/*.targets') }}

    - name: Build all projects
      run: |
        Get-ChildItem -Path $env:GITHUB_WORKSPACE\CasioEmuMsvc -Filter *.sln -Recurse | ForEach-Object {
          $solutionFile = $_.FullName
          Write-Host "Building solution: $solutionFile"
          msbuild $solutionFile /t:Restore,Rebuild /p:Configuration=${{ matrix.configuration }} /p:Platform="${{ matrix.platform }}" /m /p:UseMultiToolTask=true /p:EnforceProcessCountAcrossBuilds=true /p:UseSharedCompilation=true /p:BuildInParallel=true /p:ContinuousIntegrationBuild=true /v:minimal /fl "/flp:logfile=msbuild_${{ matrix.configuration }}_${{ matrix.platform }}.log;verbosity=diagnostic" /p:TreatWarningsAsErrors=true
        }
      shell: pwsh

    - name: Upload build logs
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ matrix.configuration }}-${{ matrix.platform }}
        path: msbuild_${{ matrix.configuration }}_${{ matrix.platform }}.log

    - name: Collect build outputs
      run: |
        $outputDir = "$env:GITHUB_WORKSPACE\BuildOutputs\${{ matrix.configuration }}\${{ matrix.platform }}"
        New-Item -ItemType Directory -Force -Path $outputDir
        Get-ChildItem -Path "$env:GITHUB_WORKSPACE\CasioEmuMsvc" -Recurse | Where-Object { 
          $_.FullName -like "*\${{ matrix.platform }}\${{ matrix.configuration }}\*" -and 
          -not $_.PSIsContainer
        } | ForEach-Object { 
          $targetPath = $_.FullName -replace [regex]::Escape("$env:GITHUB_WORKSPACE\CasioEmuMsvc"), $outputDir
          $targetDir = Split-Path -Parent $targetPath
          if (!(Test-Path $targetDir)) {
            New-Item -ItemType Directory -Force -Path $targetDir
          }
          Copy-Item $_.FullName -Destination $targetPath -Force
        }
      shell: pwsh

    - name: Upload build outputs
      uses: actions/upload-artifact@v4
      with:
        name: build-outputs-${{ matrix.configuration }}-${{ matrix.platform }}
        path: ${{ github.workspace }}\BuildOutputs\${{ matrix.configuration }}\${{ matrix.platform }}
      if: success()

    - name: List artifacts
      if: always()
      run: |
        Write-Host "Available artifacts:"
        Get-ChildItem -Path ${{ github.workspace }}\BuildOutputs -Recurse
      shell: pwsh

  test:
    needs: build
    runs-on: windows-latest
    strategy:
      matrix:
        configuration: [Debug, Release]
        platform: [x86, x64]
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        repository: telecomadm1145/CasioEmuMsvc
        path: CasioEmuMsvc
        fetch-depth: 0

    - name: List available artifacts
      run: |
        Write-Host "Available artifacts:"
        $artifacts = Invoke-RestMethod -Uri "https://api.github.com/repos/${{ github.repository }}/actions/artifacts" -Headers @{Authorization = "Bearer ${{ secrets.GITHUB_TOKEN }}"}
        $artifacts.artifacts | ForEach-Object { Write-Host $_.name }
      shell: pwsh

    - name: Download build outputs
      uses: actions/download-artifact@v4
      with:
        name: build-outputs-${{ matrix.configuration }}-${{ matrix.platform }}
        path: ${{ github.workspace }}\BuildOutputs\${{ matrix.configuration }}\${{ matrix.platform }}
      continue-on-error: true

    - name: Check if artifact was downloaded
      id: check_artifact
      run: |
        if (Test-Path "${{ github.workspace }}\BuildOutputs\${{ matrix.configuration }}\${{ matrix.platform }}") {
          Write-Host "Artifact successfully downloaded"
          echo "artifact_found=true" >> $env:GITHUB_OUTPUT
        } else {
          Write-Host "Artifact not found, skipping tests"
          echo "artifact_found=false" >> $env:GITHUB_OUTPUT
        }
      shell: pwsh

    - name: Run tests
      if: steps.check_artifact.outputs.artifact_found == 'true'
      run: |
        $testAssemblies = Get-ChildItem -Path "${{ github.workspace }}\BuildOutputs\${{ matrix.configuration }}\${{ matrix.platform }}" -Recurse -Filter *Tests.dll
        foreach ($testAssembly in $testAssemblies) {
          Write-Host "Running tests for $($testAssembly.FullName)"
          vstest.console.exe $testAssembly.FullName /Platform:${{ matrix.platform }} /Framework:.NETFramework,Version=v4.7.2
        }
      shell: pwsh
      continue-on-error: true

  create_release:
    needs: test
    runs-on: windows-latest
    steps:
    - name: Download all build outputs
      uses: actions/download-artifact@v4
      with:
        path: BuildOutputs

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: casioemumsvc-release-${{ github.run_number }}
        release_name: CasioEmuMsvc Release ${{ github.run_number }}
        draft: false
        prerelease: false

    - name: Prepare Release Files
      run: |
        $releaseFolder = "$env:GITHUB_WORKSPACE\ReleaseFiles"
        New-Item -ItemType Directory -Force -Path $releaseFolder

        # Copy all build outputs to release folder
        Copy-Item -Path "$env:GITHUB_WORKSPACE\BuildOutputs\*" -Destination $releaseFolder -Recurse

        # Create separate zip files for each configuration and platform
        Get-ChildItem -Path $releaseFolder -Directory | ForEach-Object {
          $configName = $_.Name
          Get-ChildItem -Path $_.FullName -Directory | ForEach-Object {
            $platformName = $_.Name
            $zipName = "CasioEmuMsvc-$configName-$platformName.zip"
            Compress-Archive -Path $_.FullName -DestinationPath "$releaseFolder\$zipName"
          }
        }

        # Create a full zip containing all builds
        Compress-Archive -Path "$releaseFolder\*" -DestinationPath "$releaseFolder\CasioEmuMsvc-Full.zip"

        echo "RELEASE_FOLDER=$releaseFolder" >> $env:GITHUB_ENV
      shell: pwsh

    - name: Upload Release Assets
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        Get-ChildItem -Path $env:RELEASE_FOLDER -Filter *.zip | ForEach-Object {
          gh release upload casioemumsvc-release-${{ github.run_number }} $_.FullName --clobber
        }
      shell: pwsh

    - name: Upload Additional Files
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        Get-ChildItem -Path "$env:RELEASE_FOLDER" -Recurse -File | Where-Object { $_.Extension -notin '.zip' } | ForEach-Object {
          $relativePath = $_.FullName.Replace("$env:RELEASE_FOLDER\", "")
          $assetName = $relativePath.Replace("\", "-")
          gh release upload casioemumsvc-release-${{ github.run_number }} $_.FullName --name $assetName --clobber
        }
      shell: pwsh